# Upstream Block
upstream hackazon {
   zone hackazon 64k;
   least_time header; #load balancing method
   server dcr.local.zitechlab.my.id:3001 resolve;
   server dcr.local.zitechlab.my.id:3009 resolve;
   #sticky cookie cookie_hackazon expires=15m httponly samesite=strict secure;
   sticky learn
      create=$upstream_cookie_phpsessid
      lookup=$cookie_phpsessid
      zone=client_sessions:1m
      timeout=1h;
      #sync; # Disable when no cluster configured.
}

# Active health check or monitoring block
match monitor_hackazon {
    status 200;
    header Content-Type ~ text/html;
    body ~ "Hackazon";
}

# Server block with no SSL termination, serve HTTP port 80
# Enable or disable "return" command for HTTP-to-HTTPS redirection
server {
    listen       80;
    server_name hackazon.local.zitechlab.my.id;
    status_zone hackazon;

   # Zone sync directives.
   # Enables the synchronization of shared memory zones between cluster nodes.
    #zone_sync;
    #zone_sync_server 177.100.10.5;

   # Content caching
    #proxy_cache nginx-cache;
    #proxy_cache_valid 200 302 10m;
    #proxy_cache_valid 404 1m;
    #add_header X-Proxy-Cache $upstream_cache_status;
    #proxy_cache_purge $purge_method;
    #proxy_cache_lock on;
    #proxy_cache_use_stale updating;
    #proxy_cache_key "$host$request_uri$cookie_user";

   # Compression
   # Source: https://docs.nginx.com/nginx/admin-guide/web-server/compression/
    #gzip on;
    #gzip_types image/jpg; #specify the file type that will compress
    #gzip_min_length 1000;

   # Connection & request rate limit; enable or disable when needed.
   # Refered to limit_conn_zone & limit_req_zone config on nginx.conf
    #limit_conn conn_limit 10;
    #limit_req zone=rate_limit;

    #access_log  /var/log/nginx/host.access.log  main;
    
    # Put the rewrite rule, the request will come to location block /product
    rewrite ^/gzip/(.*)$ /product/$1 last;
   

    location / {
        proxy_pass http://hackazon;
        status_zone hackazon_root;
        health_check fails=3 match=monitor_hackazon mandatory persistent;
    }

    location /product {
        #gzip on;
        #gzip_types image/jpg; #specify the file type that will compress
        #gzip_min_length 1000; #tells Nginx not to compress files smaller than 1000 bytes
        proxy_pass http://hackazon;
        status_zone hackazon_product;
    }
    
    location /faq {
        #Add request header
        proxy_set_header X-Request-Header ADD;
        #Add response header
        add_header X-Response-Header ADD;
        #Remove request header
        proxy_set_header Accept-Encoding "";
        #Remove reponse header
        proxy_hide_header X-Powered-By;
        proxy_pass http://hackazon;
        status_zone hackazon_faq;
    }

    location /nginx_status {
        # Turn on stats
        stub_status on;
        access_log   off;
        # only allow access from 192.168.1.5 #
        #allow 192.168.1.5;
        #deny all;
   }

    # None Block Location
    location /return {
        return 200 "This is an example of standar block location";
        # Will be match /retunr try access with curl command
    }

    # Case Sensitive ( ~ ) Block
    location ~ /files[0-9] {
        return 200 "This is an example regex case sensitive location block";
        # Will be match /files123 or /files<number 0-9>
    }

    # Case Insensitive ( * ) Block
    location ~* /files[0-9] {
        return 200 "This is an example regex case insensitive location block";
        # Will be match /FILES123 /Files<number 0-9> or /FilEs<number 0-9>
    }

    # Preferential Regex Block
    location ^~ /filesinfo {
        return 200 "This is an example like standard block, but more important than regex";
        # Will be match /filesinfo or /filesinfoxxx
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # enable /api/ location with appropriate access control in order
    # to make use of NGINX Plus API
    #
    location /api/ {
        api write=on;
    #    allow 127.0.0.1;
    #    deny all;
    }

}